trigger:
  branches:
    include:
      - '*'  # Run pipeline on all branches (pushes)

pr:
  branches:
    include:
      - main  #  Trigger only on PR to main

pool:
  vmImage: 'ubuntu-latest'

variables:
  # - group: bitbucket-auth
  - name: destroy_initiate
    value: 'true'

stages:
  - stage: TerraformInit
    displayName: 'Terraform Init'
    jobs:
      - job: Init
        displayName: 'Initialize Terraform'
        steps:
          - template: .pipelines/templates/terraform-init.yml
            parameters:
              displayName: 'Terraform Init with Azure Backend'
              backendServiceArm: 'terraform-spn-akspipeline'

  - stage: TerraformValidate
    displayName: 'Terraform Validate'
    dependsOn: TerraformInit
    condition: succeeded()
    jobs:
      - job: Validate
        displayName: 'Validate Terraform Files'
        steps:
          - template: .pipelines/templates/terraform-init.yml
            parameters:
              displayName: 'Terraform Init before Validate'
              backendServiceArm: 'terraform-spn-akspipeline'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'

  - stage: TerraformPlan
    displayName: 'Terraform Plan'
    dependsOn: TerraformValidate
    condition: succeeded()
    jobs:
      - job: Plan
        displayName: 'Plan Terraform Deployment'
        steps:
          - template: .pipelines/templates/terraform-init.yml
            parameters:
              displayName: 'Terraform Init before Plan'
              backendServiceArm: 'terraform-spn-akspipeline'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'terraform-spn-akspipeline'

  - stage: TerraformApply
    displayName: 'Terraform Apply'
    dependsOn: TerraformPlan
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
    jobs:
      - deployment: Apply
        displayName: 'Apply Infrastructure Changes'
        environment: 'prod'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self 
                - template: .pipelines/templates/terraform-init.yml
                  parameters:
                    displayName: 'Terraform Init before Apply'
                    backendServiceArm: 'terraform-spn-akspipeline'

                - task: TerraformTaskV4@4
                  displayName: 'Terraform Apply with Auto-Approve'
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    environmentServiceNameAzureRM: 'terraform-spn-akspipeline'
                    args: '-auto-approve'

  - stage: TerraformDestroy
    displayName: 'Terraform Destroy'
    dependsOn: TerraformApply
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'), eq(variables['destroy_initiate'], 'true'))
    jobs:
      - deployment: Destroy
        displayName: 'Destroy Infrastructure'
        environment: 'prod'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self  
                - template: .pipelines/templates/terraform-init.yml
                  parameters:
                    displayName: 'Terraform Init before Destroy'
                    backendServiceArm: 'terraform-spn-akspipeline'

                - task: TerraformTaskV4@4
                  displayName: 'Terraform Destroy with Auto-Approve'
                  inputs:
                    provider: 'azurerm'
                    command: 'destroy'
                    environmentServiceNameAzureRM: 'terraform-spn-akspipeline'
                    args: '-auto-approve'
